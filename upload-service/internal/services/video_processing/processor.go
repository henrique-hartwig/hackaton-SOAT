package video_processing

import (
	"crypto/rand"
	"fmt"
	"log"
	"time"
	"upload-service/internal/models"
)

// Processor representa o processador de v√≠deos
type Processor struct {
	// Aqui voc√™ pode adicionar depend√™ncias como:
	// - Cliente para APIs externas
	// - Configura√ß√µes de processamento
	// - etc.
}

// NewProcessor cria um novo processador
func NewProcessor() *Processor {
	return &Processor{}
}

// ProcessVideo processa um v√≠deo (fun√ß√£o vazia por enquanto)
func (p *Processor) ProcessVideo(job *models.VideoProcessingJob) *models.VideoProcessingResult {
	log.Printf("üé¨ Iniciando processamento do v√≠deo: %s", job.FileName)

	// Simular processamento (remover isso quando implementar o processamento real)
	time.Sleep(2 * time.Second)

	// Gerar ID √∫nico para o job
	jobID := generateJobID()

	// Por enquanto, sempre retorna sucesso
	// Aqui voc√™ implementaria a l√≥gica real de processamento
	result := &models.VideoProcessingResult{
		JobID:       jobID,
		VideoID:     job.VideoID,
		Status:      models.StatusCompleted,
		Message:     "V√≠deo processado com sucesso",
		ProcessedAt: time.Now(),
	}

	log.Printf("‚úÖ Processamento conclu√≠do: JobID=%s, VideoID=%d", jobID, job.VideoID)
	return result
}

// generateJobID gera um ID √∫nico para o job
func generateJobID() string {
	b := make([]byte, 16)
	rand.Read(b)
	return fmt.Sprintf("%x", b)
}

// ProcessVideoWithError simula processamento com erro (para testes)
func (p *Processor) ProcessVideoWithError(job *models.VideoProcessingJob) *models.VideoProcessingResult {
	log.Printf("üé¨ Iniciando processamento do v√≠deo (com erro): %s", job.FileName)

	// Simular processamento
	time.Sleep(1 * time.Second)

	jobID := generateJobID()

	result := &models.VideoProcessingResult{
		JobID:       jobID,
		VideoID:     job.VideoID,
		Status:      models.StatusFailed,
		Message:     "Erro durante o processamento do v√≠deo",
		ProcessedAt: time.Now(),
	}

	log.Printf("‚ùå Processamento falhou: JobID=%s, VideoID=%d", jobID, job.VideoID)
	return result
}
